//this shader contains post process and deferred lighting techniques for the ENGINE
//
//draws on a full screen quad.
#version 460 core

out float color;

in vec2 TexCoords;

//input textures from buffer
uniform sampler2D ssaoPosition;
uniform sampler2D ssaoNormal;

//projection matrix
uniform mat4 projection;

//noise texture and SSAO data
uniform sampler2D gNoise;
uniform vec2 noiseScale;
int kernelSize = 32;
float radius = 0.00115f;
float total_strength = 0.1f;

const vec3 sample_sphere[64] =
{
	vec3(0.0650667172577f,0.00057569815481f,0.0245235368154),
vec3(0.0671632412939f,0.0215107455095f,0.00779620002582),
vec3(0.0122912876681f,0.00394420842915f,0.0104504156007),
vec3(0.0535371883496f,0.0372821697436f,0.05118743994),
vec3(6.09136189332e-05f,5.20804685192e-06f,2.35406993373e-05),
vec3(0.0482346377863f,0.0692027834759f,0.0551949191837),
vec3(0.0116700313401f,0.019854821293f,0.0395764730476),
vec3(0.023529704745f,0.0211882219215f,0.00836541233128),
vec3(0.0785245027845f,0.0553487965727f,0.0860093627592),
vec3(0.0331826599036f,0.0183439147215f,0.00913679157642),
vec3(0.00252575643504f,0.00011318117502f,0.0148986268709),
vec3(0.0135450488378f,0.000877107103339f,0.00111332933882),
vec3(0.0103350884032f,0.004461880368f,0.0113881038895),
vec3(0.0693659985128f,0.0885987603659f,0.00748659563339),
vec3(0.0105196368742f,0.0249845327449f,0.0395221704934),
vec3(0.0700627733824f,0.087060029469f,0.0580380489979),
vec3(0.00478165600412f,0.000326427541915f,0.00399350967561),
vec3(0.0208556683484f,0.0150562897575f,0.0290335961439),
vec3(0.0122190413061f,0.00597724623169f,0.00923585598761),
vec3(0.0117872304212f,0.0073782964372f,0.00880043047969),
vec3(0.00595987048407f,0.0639610568323f,0.0294505451091),
vec3(0.0707873643073f,0.0863373938694f,0.0734622543544),
vec3(0.0059035102452f,0.033291590039f,0.0082638467236),
vec3(0.0130886359007f,0.00539440810057f,0.0401687242576),
vec3(0.0627405809275f,0.022804197593f,0.0850097594454),
vec3(0.0293699523073f,0.0309273882316f,0.0401330849237),
vec3(0.00226721160666f,0.030877761376f,0.00536181846066),
vec3(0.047878482403f,0.0844043720116f,0.0142699524113),
vec3(0.00348372745915f,0.00649421562479f,0.00674012060579),
vec3(0.0130306381031f,0.0393073989298f,0.0364184193691),
vec3(0.0238566961666f,0.00499867648508f,0.0168108686529),
vec3(0.0141545320288f,0.0158653974491f,0.00203002085526),
vec3(0.0405902890295f,0.0263331354711f,0.0627905609975),
vec3(0.019770155454f,0.00635670515341f,0.0114045809062),
vec3(0.00454595108833f,0.00392941296968f,0.0240423637957),
vec3(0.00095240223091f,0.0152619841899f,0.00764870264733),
vec3(0.0413707870761f,0.0624305196966f,0.0167696588112),
vec3(0.0130365303827f,0.00883884611611f,0.00339888107086),
vec3(0.078514824384f,0.0780425662356f,0.0958934896622),
vec3(0.0246782230947f,0.0247239208294f,0.0235366755258),
vec3(0.00566513251762f,0.00230375634246f,0.00167279674475),
vec3(0.0333731318243f,0.0161368703596f,0.0455442686001),
vec3(0.00960466828773f,0.021617421071f,0.0147554046995),
vec3(0.0413245790259f,0.0252280207298f,0.0403049329248),
vec3(0.0173835116468f,0.0474332880662f,0.0321234704425),
vec3(0.0316281791324f,0.0568150124364f,0.0273937174163),
vec3(0.0148307089317f,0.0143338539858f,0.0133659213602),
vec3(0.0207805045783f,0.0160363098831f,0.00762125006069),
vec3(0.0358262405049f,0.00306989670629f,0.0487967126193),
vec3(0.0140901302671f,0.00179991604136f,0.0202950393259),
vec3(0.0303850309988f,0.023912160571f,0.0178054680863),
vec3(0.0383389907323f,0.0382336670505f,0.0130283637786),
vec3(0.012452216202f,0.0397854363934f,0.0350832398852),
vec3(0.00197086587166f,0.0330358694192f,0.0346537652655),
vec3(0.0242929504612f,0.00152166760137f,0.0403175339726),
vec3(0.00325853761876f,0.00202284831114f,0.000669013003326),
vec3(0.0076090839021f,0.00824713636565f,0.0367032560793),
vec3(0.0187419546916f,0.0349173321862f,0.0607664690212),
vec3(0.00508829226954f,0.0541148245197f,0.0478810515459),
vec3(0.0125359347934f,0.0185758167919f,0.00653525140197),
vec3(0.0489489593056f,0.0629540069312f,0.00389546567618),
vec3(0.0159208979198f,0.00926727656923f,0.0256534016058),
vec3(0.0239127162903f,0.0226919204089f,0.0250356887889),
vec3(0.0291827918959f,0.0252716736695f,0.0148600702903)
};

void main()
{
  //load all texture info for fragment
	vec3 ssNormal = texture(ssaoNormal, TexCoords).rgb;
	vec3 ssPosition = texture(ssaoPosition, TexCoords).rgb;

	//SSAO processing
	vec3 ranTex = texture(gNoise, TexCoords * noiseScale).xyz;
	ranTex.xy *= 2.0;
	ranTex.xy -= 1.0;
	ranTex.z = 0.0;
	vec3 randomVec = normalize(ranTex);
	vec3 tangent = normalize(randomVec - ssNormal * dot(randomVec, ssNormal));
	vec3 bitangent = cross(ssNormal, tangent);
	mat3 TBN = mat3(tangent, bitangent, ssNormal);

	float occlusion = 0.0f;
	for(int i = 0; i < kernelSize; i++)
	{
		vec3 sam = TBN * normalize(sample_sphere[i]);
		sam = ssPosition + sam * radius;

		vec4 offset = vec4(sam, 1.0);
		offset = projection * offset;
		offset.xyz /= offset.w;
		offset.xyz = offset.xyz * 0.5 + 0.5;

		float sampleDepth = texture(ssaoPosition, offset.xy).z;
		float rangeCheck = smoothstep(0.0, 1.0, radius / abs(ssPosition.z - sampleDepth));
		occlusion += (sampleDepth >= sam.z + 0.01 ? 1.0 : 0.0) * rangeCheck;
	}
	float ao = 1.0 - (occlusion / kernelSize);

  color = clamp(ao, 0.0, 1.0);
}
